name: CI - Tests & Coverage

on:
    workflow_dispatch:
        inputs:
            shards:
                description: "Select number of shards to split tests"
                required: true
                default: "1"
                type: choice
                options:
                    - "1"
                    - "2"
                    - "4"
                    - "8"
                    - "12"
                    - "15"
    pull_request:
        types:
            - opened

jobs:
    pre-processing:
        name: Syncing test suits
        runs-on: ubuntu-latest
        steps:
            # Checkout repository
            - name: Checkout code
              uses: actions/checkout@v3
            # Identify changed test files in PR
            - name: Detect changed test files
              id: diff
              run: |
                  BASE=${{ github.event.pull_request.base.sha }}
                  HEAD=${{ github.event.pull_request.head.sha }}

                  # Ensure both commits are available
                  git fetch origin ${{ github.event.pull_request.base.ref }}
                  git fetch origin ${{ github.event.pull_request.head.ref }}

                  # Get changed files containing ".test.ts/js/tsx/jsx"
                  files=$(git diff --name-only $BASE $HEAD | grep -E '\.test\.(ts|js|jsx|tsx)$' || true)

                  # Export as space-separated string for later use
                  echo "CHANGED_TESTS=$(echo $files | xargs)" >> $GITHUB_ENV

    generate-matrix:
        name: Generate Matrix
        needs: pre-processing
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
        steps:
            - name: Generate matrix
              id: set-matrix
              run: |
                  SHARDS=${{ github.event.inputs.shards || 1 }}
                  MATRIX=$(seq -s, 1 $SHARDS | sed 's/^/[/' | sed 's/$/]/')
                  echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

    generate-shard-files:
        name: Generate Shard Files
        needs: generate-matrix
        runs-on: ubuntu-latest
        outputs:
            shard-files: ${{ steps.set-shard-files.outputs.shard-files }}
        steps:
            # Checkout repository
            - name: Checkout code
              uses: actions/checkout@v3

            # Setup Node.js and install dependencies
            - name: Setup Node.js & Install dependencies
              uses: actions/setup-node@v3

            - name: Generate shard test files
              id: set-shard-files
              run: |
                  npm install -g minimist

                  SHARDS=${{ github.event.inputs.shards || 1 }}
                  MATRIX=${{ needs.generate-matrix.outputs.matrix }}

                  for i in $(seq 1 $SHARDS); do
                    FILES=$(node scripts/shard.mjs \
                      --index $i \
                      --shards $SHARDS \
                      --file timing.json \
                      $CHANGED_TESTS)

                    echo "SHARD_${i}_FILES=$FILES" >> $GITHUB_ENV
                  done

    test-shards: # runs tests in parallel shards
        name: Test Shards
        runs-on: ubuntu-latest
        needs: [generate-matrix, generate-shard-files]
        strategy:
            fail-fast: false
            matrix:
                shard: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
        steps:
            # Checkout repository
            - name: Checkout code
              uses: actions/checkout@v3

            # Setup Node.js and install dependencies
            - name: Setup Node.js & Install dependencies
              uses: actions/setup-node@v3
              with:
                  node-version: 20
                  cache: "yarn"
            - run: yarn install --frozen-lockfile

            # Run tests using sharding
            - name: Run tests (Shard ${{ matrix.shard }})
              env:
                  NODE_OPTIONS: "--max_old_space_size=8192"
              run: |
                  yarn test $(node scripts/shard.mjs \
                    --index ${{ matrix.shard }} \
                    --shards ${{ github.event.inputs.shards }} \
                    --file timing.json \
                    $CHANGED_TESTS) \
                    --silent --verbose \
                    --coverage \
                    --coverageReporters=json \
                    --json --outputFile=report.json \
                    --passWithNoTests

            # Update timing.json file from test report
            - name: Update timing report
              run: node scripts/processor.mjs --input report.json --output timing.json

            # Cache coverage artifact
            - name: Cache coverage
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-shard-${{ matrix.shard }}
                  path: coverage/
                  retention-days: 1

            # Upload timing artifact
            - name: Upload timing
              uses: actions/upload-artifact@v4
              with:
                  name: timing-shard-${{ matrix.shard }}
                  path: timing.json
                  retention-days: 1

    merge-coverage: # merges coverage results from all shards
        needs: test-shards
        name: Merge Coverage
        runs-on: ubuntu-latest
        steps:
            # Setup Node.js and install dependencies
            - name: Setup Node.js & Install dependencies
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            # Download all coverage artifacts
            - name: Download coverage artifacts
              uses: actions/download-artifact@v4
              with:
                  path: coverage-reports/

            # Merge coverage reports from all shards
            - name: Merge coverage reports
              run: |
                  npm install -g nyc

                  # Create merge directory
                  mkdir -p merged-coverage

                  # Collect coverage-final.json files
                  find coverage-reports -name "coverage-final.json" -type f | while read -r file; do
                    parent_dir=$(basename "$(dirname "$file")")
                    mv "$file" "merged-coverage/${parent_dir}.json"
                  done

                  # Merge coverage using nyc
                  npx nyc merge merged-coverage merged-coverage.json
                  npx nyc report --reporter=html --reporter=text --reporter=lcov --temp-dir=merged-coverage

            # Upload final merged coverage report
            - name: Upload merged coverage
              uses: actions/upload-artifact@v4
              with:
                  name: merged-coverage
                  path: |
                      coverage/
                      merged-coverage.json
